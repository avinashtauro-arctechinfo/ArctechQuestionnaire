//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Questionnaire.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuestionnaireEntities : DbContext
    {
        public QuestionnaireEntities()
            : base("name=QuestionnaireEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AnswerOption> AnswerOptions { get; set; }
        public virtual DbSet<Candidate> Candidates { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<ExamAnswer> ExamAnswers { get; set; }
        public virtual DbSet<ExamQuestion> ExamQuestions { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetCandidateScore(Nullable<int> candidateId)
        {
            var candidateIdParameter = candidateId.HasValue ?
                new ObjectParameter("candidateId", candidateId) :
                new ObjectParameter("candidateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCandidateScore", candidateIdParameter);
        }
    
        public virtual int GetCandidateScore1(Nullable<int> candidateId, ObjectParameter score)
        {
            var candidateIdParameter = candidateId.HasValue ?
                new ObjectParameter("candidateId", candidateId) :
                new ObjectParameter("candidateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCandidateScore1", candidateIdParameter, score);
        }
    
        public virtual int GetScoreForCandidate(Nullable<int> candidateId, ObjectParameter score)
        {
            var candidateIdParameter = candidateId.HasValue ?
                new ObjectParameter("candidateId", candidateId) :
                new ObjectParameter("candidateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetScoreForCandidate", candidateIdParameter, score);
        }
    }
}
